# Singleton service factory configuration/IoC injection
singletons:
# - com.networknt.server.StartupHookProvider:
  # If you are using mask module to remove sensitive info before logging, uncomment the following line.
  # - com.networknt.server.JsonPathStartupHookProvider
# - com.networknt.server.ShutdownHookProvider:
  # - com.networknt.server.Test1ShutdownHook
- javax.sql.DataSource:
  - com.zaxxer.hikari.HikariDataSource:
# java.sql.DriverManager auto detect META-INF/services/java.sql.Driver, call Driver.acceptsURL, we add net.sf.log4jdbc.DriverSpy to it, so driverClassName is optional
#      driverClassName: com.mysql.jdbc.Driver
#      jdbcUrl: jdbc:mysql://localhost:3306/apijson?useUnicode=true&characterEncoding=UTF8&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8
      driverClassName: net.sf.log4jdbc.DriverSpy
      jdbcUrl: jdbc:log4jdbc:mysql://${db.hostPort:localhost:3306}/${db.database:apijson}?useUnicode=true&characterEncoding=UTF8&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8
      username: ${db.username:apijson}
      password: ${db.password:apijson}
      minimumIdle: 1
      maximumPoolSize: ${db.maximumPoolSize:1}
      autoCommit: true
      useServerPrepStmts: true
      cachePrepStmts: true
      cacheCallableStmts: true
      cacheResultSetMetadata: true
      prepStmtCacheSize: 10
      prepStmtCacheSqlLimit: 2048
# comment out the following line to use ping
#      connectionTestQuery: SELECT 1
      connectionTimeout: 3000

# redis-manager or memory session
# - io.undertow.server.session.SessionConfig:
  # - io.undertow.server.session.SessionCookieConfig
#- io.undertow.server.session.SessionManager:
#  - io.undertow.server.session.InMemorySessionManager:
#    - java.lang.String: INMEMORY-SESSION
# - com.networknt.session.SessionRepository:
#  - com.networknt.session.redis.RedisSessionRepository
  #  - com.xlongwei.light4j.openapi.extend.MyRedisSessionRepository
# - com.networknt.session.SessionManager:
  # - com.networknt.session.redis.RedisSessionManager

- com.networknt.registry.URL:
  - com.networknt.registry.URLImpl:
      # protocol: light
      # host: localhost
      # port: 8080
      # path: consul
      parameters:
        # registryRetryPeriod: '30000'
        light4j: http://localhost:8080
- com.networknt.consul.client.ConsulClient:
  - com.networknt.consul.client.ConsulClientImpl
- com.networknt.registry.Registry:
  # - com.networknt.consul.ConsulRegistry
  - com.networknt.registry.support.DirectRegistry
- com.networknt.balance.LoadBalance:
  - com.networknt.balance.RoundRobinLoadBalance
- com.networknt.cluster.Cluster:
  - com.networknt.cluster.LightCluster
